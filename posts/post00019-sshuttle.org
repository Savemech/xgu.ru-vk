Firewall piercing 2 или о том, как от портфорвардинга получить все плюсы туннелля

#записки_из_подполья

В прошлый раз мы говорили о том, как можно получить полноценный
доступ в сеть, если есть возможность ограниченного доступа.
Мы рассматривали разные методы, одним из важнейших был SSH port forwarding,
универсальный метод, позволяющий переносить интересующий порт из удалённой
сети локально (или наоборот).

Простейший случай использования порт-форвардинга: из Интернета нужно получить
доступ к внутреннему серверу сети, для этого можно использовать промежуточный
хост, на который есть доступ по SSH. Для этого выполняется команда:

  ssh -L 8000:server1:80 ssh-server.my.net -N -f

Здесь мы выполняем заход на удалённый сервер `ssh-server.my.net`
и переносим внутри туннеля порт server1:80 (как он видится с сервера ssh-server.my.net)
локально на порт 8000. Получается, что теперь обращаясь на порт 127.0.0.1:8000 мы получаем
доступ к серверу server1:80.

Довольно удобно, особенно учитывая, что не нужно выполнять никаких особенных настроек
ни с той, ни с другой стороны, и, главное, что внутри сети не требуется никаких особых прав.

Проблемы начинаются тогда, когда вам нужно получить доступ не к одному серверу внутри,
а ко множеству. Вы начинаете форвардить следующий, затем следующий, затем следующий порт:

  ssh -L 8001:server2:80 ssh-server.my.net -N -f
  ssh -L 8002:server3:80 ssh-server.my.net -N -f
  ssh -L 8003:server4:80 ssh-server.my.net -N -f
  ssh -L 8004:server5:80 ssh-server.my.net -N -f
  ssh -L 8005:server6:80 ssh-server.my.net -N -f

или совмещая всё в одной команде:

  ssh -L 8001:server2:80 ssh-server.my.net \
         8002:server3:80 ssh-server.my.net \
         8003:server4:80 ssh-server.my.net \
         8004:server5:80 ssh-server.my.net \
         8005:server6:80 ssh-server.my.net -N -f

В итоге очень быстро команда разрастается до невозможности, 
и вы очень быстро начинаете путаться в портах. На что отражается порт 8005?
Если у вас нет чёткого плана и вы ситуативно форвардите те порты, которые сейчас нужны,
список становится ещё более запутанным (кстати, посмотреть список отфорваженных на данный
момент портов вы можете нажав `~#`, а добавить новый ~C и вызвать команду внутри).

Как же сделать так, что бы обращаться к серверам по их именам и портам,
как будто мы и вправду находимся внутри сети?

Очевидным решением является полноценный туннель с маршрутизацией по нему,
но он требует, во-первых, хотя и не большого, но всё же времени для настройки,
а во-вторых, и это самое главное — прав администратора с обеих сторон, но главное, с той стороны.
Прав администратора в той сети у вас, как правило, нет, а шелл на какой-то из машин есть
(если вы задали вопрос "а толку мне от шелла на какой-то машине,
если мне нужен шелл на машине выставленной одной стороной в интернет", то это правильно —
сначала нужно пробросить порт с этой "какой-то машины" наружу, а разные способы как это сделать — в предыдущем
посте серии #записки_из_подполья).

Решить задачу можно с помощью программы `sshuttle`, которая прозрачно перехватывает соединения,
направленные в определённую сеть (или сети) и перенаправляет их через ssh.
sshuttle может даже перехватывать DNS-резолвинг, так что складывается полное ощущение присутствия в сети. 

  sudo sshuttle --dns -r igor@127.0.0.1:22001 10/8 192.168.5.0/24 192.168.7.0/24

В этом примере трафик в сети 10.x, 192.168.5.x и 192.168.7.x отравляется через SSH на хост 127.0.0.1:22001
(судя по всему сюда раньше сделали портфорвардинг какого-то порта из той сети, где мы хотим работать).

Вот так вот вы, не имея ни прав рута на пограничном сервере в удалённой сети, и собственно не имея
даже на него доступа, ходите по этой сети как по своей собственной.

